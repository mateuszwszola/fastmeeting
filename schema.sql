-- USERS
create table public.users (
  -- UUID from auth.users
  id uuid references auth.users not null primary key,
  full_name text,
  avatar_url text
);
alter table public.users enable row level security;
create policy "Can view own user data." on public.users for select using (auth.uid() = id);
create policy "Can update own user data." on public.users for update using (auth.uid() = id);

/**
* This trigger automatically creates a user entry when a new user signs up via Supabase Auth.
*/ 
create function public.handle_new_user() 
returns trigger as $$
begin
  insert into public.users (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$ language plpgsql security definer;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- ROOMS
create table public.rooms (
  id            bigint generated by default as identity primary key,
  inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null,
  slug          text not null unique,
  name          text not null,
  owner_id      uuid references public.users not null
);
alter table public.rooms enable row level security;
create policy "Allow logged-in read access" on public.rooms for select using (auth.role() = 'authenticated');
create policy "Allow individual insert access" on public.rooms for insert with check (auth.uid() = owner_id);
create policy "Allow owner update access" on public.rooms for update using (auth.uid() = owner_id);
create policy "Allow owner delete access" on public.rooms for delete using (auth.uid() = owner_id);
